#+TITLE: Emacs initialization
* Emacs Initialization
:PROPERTIES:
:tangle: init.el
:END:

This document describes how Emacs is initialized.

** Minimalistic user interface

Emacs shows startup screen. It gets anoying after a while, so they
need to be turned off.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq inhibit-splash-screen t)
#+END_SRC

After getting used to the keyboard interface the menus and such just
takes valuable screen space. So mouse interface is turned off.
This is done early in the initialization to prevent momentary display.

#+BEGIN_SRC emacs-lisp
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
#+END_SRC

** Exec path

At least in MacOS there is problems of ~exec-path~ being insufficient.
The main hedeach this causes is that gpg is not found and encrypted
files can not be opened or saved.

Following code will extract exec-path from ~PATH~ variable.

#+BEGIN_SRC emacs-lisp
(let ((elements (split-string (getenv "PATH") ":")))
  (dolist (e elements)
    (add-to-list 'exec-path e)))
#+END_SRC

** Lisp files

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp/")
#+END_SRC

** Using GPG-Agent in MacOS

MacOS environment is "funny" thing there is different for shell and
different for applications. The gpg-agent can be configured to be
launched during login ([[http://www.weinschenker.name/2013-10-08/use-gpgtools-for-ssh-logins-on-mac-os-x/][how-to]]), but emacs does not receive the related
environment variables. Following code fixes this issue.

#+BEGIN_SRC emacs-lisp
  ;; read gpg-agent environment

  (defun read-env-line (line)
    "read a env line and post to environment"
    (let ((key-value-pair (split-string line "=" t)))
      (setenv (car key-value-pair) (car (last key-value-pair))))
    )
  (defvar gpg-agent-info-file)
  (setq gpg-agent-info-file (concat (getenv "HOME") "/.gpg-agent-info"))

  (when (and
         (eq system-type 'darwin)
         (file-exists-p gpg-agent-info-file))
        (with-temp-buffer
          (progn
            (insert-file-contents gpg-agent-info-file)
            (mapc 'read-env-line (split-string (buffer-string) "\n" t)))
          )
    )
#+END_SRC
** No tabs

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC

** Backups

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq
  delete-old-versions t
  kept-new-versions 6
  kept-old-versions 2
  version-control t
  backup-by-copying t
)
#+END_SRC

** Browser


#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
     (setq browse-url-browser-function 'browse-url-default-macosx-browser))
#+END_SRC


** Emacsclient server

#+BEGIN_SRC emacs-lisp
(server-start)
#+END_SRC

** Elget

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/el-get/el-get")

(unless (require 'el-get nil 'noerror)
  (with-current-buffer
      (url-retrieve-synchronously
       "https://raw.githubusercontent.com/dimitri/el-get/master/el-get-install.el")
    (goto-char (point-max))
    (eval-print-last-sexp)))

(require 'el-get-elpa)
;; Build the El-Get copy of the package.el packages if we have not
;; built it before.  Will have to look into updating later ...
(unless (file-directory-p el-get-recipe-path-elpa)
  (el-get-elpa-build-local-recipes))

(add-to-list 'el-get-recipe-path "~/.emacs.d/el-get-user/recipes")
(el-get 'sync)
#+END_SRC


** No passwords in shell

#+BEGIN_SRC emacs-lisp
;; No passwords show in shell
(add-hook 'comint-output-filter-functions
          'comint-watch-for-password-prompt)
#+END_SRC
** New prefix key Control-q

~Control-q~ is bound to ~quoted-insert~ by default. That command is
not use so often and the key is perfectly located for prefix key.
So it is unset here to allow it to be re-used later.

#+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "C-q"))
#+END_SRC

** Org-mode

Install org mode through [[Elget]].

#+BEGIN_SRC emacs-lisp
(el-get-bundle org)
#+END_SRC

Set up agenda functionality. Files are located under org-directory
under home.

#+BEGIN_SRC emacs-lisp
(setq org-directory "~/org")
(setq org-agenda-files (concat org-directory "/agenda"))
(setq org-default-notes-file (concat org-directory "/notes.org.gpg"))
#+END_SRC


Set up archive file that is encrypted. By default entries would be archive
to files postfixed by ~_archive~. This file is not encrypted and that could
be a problem.

#+BEGIN_SRC emacs-lisp
(setq org-archive-location (concat org-directory "/archive.org.gpg::* From %s"))
#+END_SRC


Setup default keys (see [[http://orgmode.org/org.html#Activation][Org mode activation]]). There has not been any
reason to change them yet.
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-cb" 'org-iswitchb)
#+END_SRC

Active babel languages.
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '(
   (makefile . t)
   (sh . t)
   (js . t)
   (plantuml . t)
   (emacs-lisp . t)
   ))
#+END_SRC

Following will add GTD type of state for the tasks and
provide logging.
#+BEGIN_SRC emacs-lisp
(setq org-log-into-drawer t)
(setq org-todo-keywords
       '((sequence "IN(i!)" "SOMEDAY(s!)" "WAIT(w@/!)" "TODO(t!)" "|" "DONE(d!)" "CANCELLED(c@)")))
#+END_SRC

Log looks something like this under the task header line.
#+BEGIN_EXAMPLE
:LOGBOOK:
- State "DONE"       from "SOMEDAY"    [2016-02-22 Mon 16:04]
- State "SOMEDAY"    from "IN"         [2016-02-22 Mon 16:03]
- State "IN"         from "WAIT"       [2016-02-22 Mon 16:03]
:END:
#+END_EXAMPLE

This adds simple line that tells when the task has been closed.
#+BEGIN_SRC emacs-lisp
(setq org-log-done 'time)
#+END_SRC

Improve how the stuck projects are found.
#+BEGIN_SRC emacs-lisp
(setq org-tags-exclude-from-inheritance '("PROJECT"))
(setq org-stuck-projects
           '("+PROJECT/-MAYBE-DONE" ("TODO")))
#+END_SRC

Capture templates
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
    '(
      ("t"
         "Task"
         entry
         (file+headline org-default-notes-file "Tasks")
         "* IN %^{Title}\n  CREATED: %U\n  %i"
         :empty-lines 1)
      ))
#+END_SRC

** COMMENT Mobile org

#+BEGIN_SRC emacs-lisp
(setq org-mobile-directory "~/Dropbox/MobileOrg")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-mobile-use-encryption nil)
#+END_SRC

** MacOS command keys as meta

Accidentally pressin command key in MacOS is annoying so they are configured to be as meta-keys. 
#+BEGIN_SRC
(setq ns-command-modifier 'meta)
(setq ns-right-command-modifier 'meta)
#+END_SRC

** Misc


#+BEGIN_SRC emacs-lisp
;;; turn on syntax highlighting
(global-font-lock-mode 1)

;; Mustache mode
(add-to-list 'load-path "~/.emacs.d/ladatut")
(require 'mustache-mode)

(defun iwb ()
  "indent whole buffer"
  (interactive)
  (delete-trailing-whitespace)
  (indent-region (point-min) (point-max) nil)
  (untabify (point-min) (point-max)))

(defun previous-line-insert-newline ()
  "Moves line up and creates empty line"
  (interactive)
  (previous-line)
  (end-of-line)
  (newline-and-indent)
  )

(defun next-line-insert-newline ()
  "Moves line up and creates empty line"
  (interactive)
  (end-of-line)
  (newline-and-indent)
  )

(setq line-move-visual nil)
(put 'scroll-left 'disabled nil)

;; (global-set-key (kbd "C-,") 'backward-paragraph)
;; (global-set-key (kbd "C-.") 'forward-paragraph)
;; (global-set-key  (kbd "C-`")    'shell-command)
;; (global-set-key  (kbd "M-`")    'shell-command-on-region)

;; These need some more tought sou they dont`t override org-mode keys
;; (global-set-key (kbd "C-c <return>") 'set-rectangular-region-anchor)
;; (global-set-key (kbd "C-c c") 'mc/edit-lines)
;; (global-set-key (kbd "C-c a") 'mc/mark-all-like-this)
;; (global-set-key (kbd "C-c .") 'mc/mark-next-like-this)
;; (global-set-key (kbd "C-c ,") 'mc/mark-previous-like-this)
;; (global-set-key (kbd "C-c m") 'mc/mark-more-like-this-extended)

(global-set-key (kbd "C-c f") 'iwb)

;; Moving from window to window using arrows
(global-set-key (kbd "C-c <left>")  'windmove-left)
(global-set-key (kbd "C-c <right>") 'windmove-right)
(global-set-key (kbd "C-c <up>")    'windmove-up)
(global-set-key (kbd "C-c <down>")  'windmove-down)

(global-set-key (kbd "M-n") 'next-line-insert-newline)
(global-set-key (kbd "M-p") 'previous-line-insert-newline)



(global-unset-key (kbd "C-<SPC>"))
(global-set-key (kbd "C-<SPC>") 'set-mark-command)



(global-set-key (kbd "s-<left>")  'windmove-left)
(global-set-key (kbd "s-<right>") 'windmove-right)
(global-set-key (kbd "s-<up>")    'windmove-up)
(global-set-key (kbd "s-<down>")  'windmove-down)

(put 'upcase-region 'disabled nil)
(put 'scroll-left 'disabled nil)

#+END_SRC
** Ace Jump
#+BEGIN_SRC emacs-lisp
  (el-get-bundle ace-jump-mode)

  (add-hook 'comint-mode-hook
                 (lambda ()
                   (define-key comint-mode-map (kbd "C-.") 'ace-jump-mode)
                   (define-key comint-mode-map (kbd "<C-return>") 'comint-accumulate)
                  ))

                 
  ;; 
  ;; enable a more powerful jump back function from ace jump mode
  ;;
  (autoload
    'ace-jump-mode-pop-mark
    "ace-jump-mode"
    "Ace jump back:-)"
    t)
  (eval-after-load "ace-jump-mode"
    '(ace-jump-mode-enable-mark-sync))
  (define-key global-map (kbd "C-q q") 'ace-jump-mode-pop-mark)
  (define-key global-map (kbd "C-.") 'ace-jump-mode)
#+END_SRC
** setup-autocomplete.el
#+BEGIN_SRC emacs-lisp
#+END_SRC
** setup-cedet.el
#+BEGIN_SRC emacs-lisp
;; Load CEDET
(el-get-bundle cedet)
#+END_SRC
** setup-csv.el
#+BEGIN_SRC emacs-lisp
;; CSV Mode
(el-get-bundle csv-mode)
(require 'csv-mode)
#+END_SRC
** setup-docker-mode.el
#+BEGIN_SRC emacs-lisp
(el-get-bundle dockerfile-mode)
;;; Dockerfile mode
(require 'dockerfile-mode)
(add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))
#+END_SRC
** setup-edit-server.el
#+BEGIN_SRC emacs-lisp
(el-get-bundle edit-server)
(edit-server-start)
#+END_SRC
** setup-erlang.el
#+BEGIN_SRC emacs-lisp
(defun erl-exists () "Tests wether go is installed or not" 
  (= (call-process "which" nil nil nil "erl") 0)
)


(defun erl-setup () "Install erlang environment with el-get"
       (el-get-bundle erlang-mode)
)

(if (erl-exists) (erl-setup))
#+END_SRC
** setup-expand-region.el
#+BEGIN_SRC emacs-lisp
(el-get-bundle expand-region)
(require 'expand-region)
(global-set-key (kbd "C-+") 'er/expand-region)
#+END_SRC
** setup-go.el
#+BEGIN_SRC emacs-lisp
(defun system-has-go () "Tests wether go is installed or not" 
       (condition-case nil
           (progn
             (start-process "" nil "go")
             t
             )
         (error nil))
       )
(defun makeinfo-version () "Make info version"
       (with-temp-buffer
          (call-process "makeinfo" nil t nil "--version")
          (goto-char (point-min))
          (re-search-forward "[0-9]\\{1,2\\}\\(\\.[0-9]\\{1,2\\}\\)\\{1,2\\}")
          (let ((s (match-beginning 0)) (e (point)))
            (mapcar
             'string-to-number
             (split-string (buffer-substring s e) "\\.")))))




(defun setup-go () "Install go environment with el-get"
       (el-get-bundle go-mode)
       (el-get-bundle dash)
       
       ;; Require makeinfo which major version is 5 ore more
       (if (< 4 (car (makeinfo-version)))
           (
           (el-get-bundle flycheck)   
         ;; go get github.com/dougm/goflymake
         (add-to-list 'load-path "~/src/github.com/dougm/goflymake")
         (require 'go-flycheck))
       )

       

       ;; go get github.com/nsf/gocode
       (el-get-bundle go-autocomplete)
       (require 'go-autocomplete)

       (add-hook 'go-mode-hook 
                 (lambda ()
                         (add-hook 'before-save-hook 'gofmt-before-save))
                 ))

(if (system-has-go) (setup-go))
#+END_SRC
** setup-idea.el
#+BEGIN_SRC emacs-lisp
;; Idea related shortcuts

(defun idea-open-file (s) "Opens file in idea"
       (interactive
        (list (idea-open-file (buffer-substring (region-beginning) (region-end)))))
       (start-process "" nil "idea" s)
       )

#+END_SRC
** setup-jira.el
#+BEGIN_SRC emacs-lisp
(el-get-bundle org-jira)
(setq org-jira-working-dir "~/org/jira")
#+END_SRC
** setup-multicursore.el
#+BEGIN_SRC emacs-lisp
(el-get-bundle multiple-cursors)
#+END_SRC
** setup-mysql.el
#+BEGIN_SRC emacs-lisp
;; Allows changing port used to connect MySQL-database
;(setq sql-mysql-login-params (append sql-mysql-login-params '(port)))
;(setq sql-port 3306)
#+END_SRC
** setup-plantuml.el
#+BEGIN_SRC emacs-lisp

;; Donwload plantuml.jar if missing and use it.
(let ((plantuml-jar "~/.emacs.d/plantuml.jar"))
  (if (not (file-exists-p plantuml-jar))
      (progn
        (url-copy-file "http://downloads.sourceforge.net/project/plantuml/plantuml.jar?r=http%3A%2F%2Fplantuml.com%2Fdownload.html&ts=1441279540&use_mirror=netix" plantuml-jar)
        ))
  (setq org-plantuml-jar-path  (expand-file-name plantuml-jar))
)

;; Don`t confirm plant uml runs for conviency.
(lexical-let ((default-confirm org-confirm-babel-evaluate))
 (defun my-org-confirm-babel-evaluate (lang body)
           (if (string= lang "plantuml") nil default-confirm))
 (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
)
#+END_SRC
** setup-tramp.el
#+BEGIN_SRC emacs-lisp
(el-get-bundle tramp)
#+END_SRC
** setup-yaml.el
#+BEGIN_SRC emacs-lisp
(el-get-bundle yaml-mode)

#+END_SRC
** setup-yasnippet-and-ac.el
#+BEGIN_SRC emacs-lisp
(el-get-bundle yasnippet)
(el-get-bundle auto-complete)
(el-get-bundle auto-complete-yasnippet)

(require 'yasnippet)
(require 'auto-complete)
(require 'auto-complete-config)
(require 'auto-complete-yasnippet)

(ac-config-default)
;(global-set-key (kbd "C-<tab>")  'yas-expand)

(setq ac-source-yasnippet nil)

;;; auto complete mod
;;; should be loaded after yasnippet so that they can work together

(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")

;;; set the trigger key so that it can work together with yasnippet on tab key,
;;; if the word exists in yasnippet, pressing tab will cause yasnippet to
;;; activate, otherwise, auto-complete will
(ac-set-trigger-key "<tab>")



;; (setq-default ac-sources
;;       '(
;;         ;; ac-source-semantic
;;         ac-source-yasnippet
;;         ac-source-abbrev
;;         ac-source-words-in-buffer
;;         ac-source-words-in-all-buffer
;;         ;; ac-source-imenu
;;         ac-source-files-in-current-dir
;;         ac-source-filename
;;         )
;;       )

(yas-global-mode 1)
(global-auto-complete-mode 1)

 (defadvice ac-fallback-command (around no-yasnippet-fallback activate)
      (let ((yas-fallback-behavior nil))
        ad-do-it))
#+END_SRC
** Run local init

#+BEGIN_SRC emcas-lisp
(setq local-init-file "~/.emacs.d/local-init.el")
(if (file-exists-p local-init-file)
(load local-init-file)
)
#+END_SRC
